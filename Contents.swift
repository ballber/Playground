/*
 Playground creat per Albert Mata
 Desenvolupament aplicacions per a dispositius iOS
 Universitat Oberta de Catalunya
 26/09/2018
 */

/*
Playground resolt per Josep Ballber
30/09/2018
 */

/*
 Arrays.Per tal que agafeu una mica d'experi√®ncia treballant amb arrays, us he preparat un petit playground amb uns exercicis molt r√†pids de resoldre. Si m√©s no en termes d'espai.
 Per√≤ us pot dur unamica de temps trobar les respostes. Si em permeteu la recomanaci√≥, esbaralleu-vos una mica amb la documentaci√≥ oficial d'Apple abans de rec√≥rrer a StackOverflow o similars  buscant la resposta. En aquest enlla√ß hi ha tot el que necessiteu per resoldre totes les preguntes:
 
 https://developer.apple.com/documentation/swift/array
 
 Veureu que sovint diu que no podeu afegir cap l√≠nia de codi ni cap car√†cter ";". A Swift, en general, el car√†cter ";" a final de l√≠nia √©s opcional i, per tant, no el posem mai. Per√≤ √©s cert que es pot posar i llavors ens serveix per poder escriure el que serien diverses l√≠nies de codi en una sola, separant-les amb aquests ";". Si us dic que resoleu un problema sense afegir cap altra l√≠nia de codi per√≤ us deixo escriure ";" per anar afegint m√©s codi seria una mica absurd, no trobeu? Per aix√≤ aquesta frase.
 
 Sabreu si teniu b√© tot l'exercici quan tots els tests passin (emojis contents). Quan estigueu, em podeu enviar l'arxiu .playground (potser comprimit en .zip si l'enviament us d√≥na problemes) per correu electr√≤nic i m'ho mirar√©.
 
 */

import Foundation

/*
 Instruccions. Molt senzill. Aneu llegint aquest document. Procureu entendre tot el que s'hi fa.
 Cada vegada que trobeu un bloc de codi comentat amb car√†cters // descomenteu-lo i ompliu tot el
 que calgui. Com a resultat final, haureu d'obtenir tota una reguitzell de l√≠nies dient-vos que
 heu passat tots els tests. No cal dir que les l√≠nies amb una crida al m√®tode test(_, _) no les
 podeu modificar (nom√©s descomentar-les amb la resta del bloc).
 */

/*
 Creem una funci√≥ auxiliar que ens servir√† per fer els tests.
 */
func test(_ n: Int, _ x: Bool) {
    print("Test \(n) \(x ? "üòç" : "‚ò†Ô∏è")")
}

/*
 Comencem definint una estructura que ens servir√† per despr√©s crear-ne inst√†ncies.
 */
struct Person {
    var id: Int
    var name: String
    var age: Int
}

/*
 Ara creem una array de persones amb les que tot seguit podrem fer algunes proves de codi.
 */
/// array (people) d'estructures (Person) : ArrayOfPerson,peopleArray

let people = [Person(id: 42, name: "Albert", age: 39),
              Person(id: 128, name: "Jordi", age: 47),
              Person(id: 256, name: "Ricard", age: 57),
              Person(id: 512, name: "Marc", age: 23),
              Person(id: 64, name: "Judit", age: 15),
              Person(id: 32, name: "Marta", age: 27),
              Person(id: 16, name: "Anna", age: 17),
              Person(id: 2, name: "Merc√®", age: 49)]

// let ArrayOfStructs = people
// numero elements de l'array
// print(ArrayOfStructs.count)

/*
 Quina √©s la primera persona de la llista? Hi ha diverses maneres de recuperar-la partint de people.
 Busqueu-ne com a m√≠nim dues de diferents. No podeu afegir cap l√≠nia de codi ni cap car√†cter ";".
 */

 /// https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html

let p1 = people[0]
let p2 = people.first!
let p3 = people.reversed().last!
let p4 = people.prefix(1)

//let object = people.first{$0.name == "Albert"}
//print(object)
print(p2)
print(p3)
print(p4)

//print(p1)
//print(p2)
test(1, type(of: p1) == Person.self && p1.age == 39)
test(2, type(of: p2) == Person.self && p2.age == 39)
test(3, type(of: p3) == Person.self && p2.age == 39)
test(4, type(of: p4) == Person.self && p2.age == 39)

/*
 Per motius de privacitat, ens demanen obtenir un array amb totes les edats de les 8 persones.
 Per√≤ nom√©s les edats. No podeu afegir cap l√≠nia de codi ni cap car√†cter ";".
 */

/// https://codeburst.io/swift-map-flatmap-filter-and-reduce-53959ebeb6aa

let ages = people.map({(employee: Person) -> Int in employee.age })
let ages2 = people.map({ $0.age })
test(3, ages == [39, 47, 57, 23, 15, 27, 17, 49])
test(32, ages2 == [39, 47, 57, 23, 15, 27, 17, 49])
/*
 Ara ens demanen els noms, en ordre alfab√®tic, de tots aquells qui tenen 40 anys o m√©s.
 No podeu afegir cap l√≠nia de codi ni cap car√†cter ";".
 */

let forties = people.filter( {$0.age > 39}).map({ return $0.name }).sorted()
//print(forties)
test(4, forties == ["Jordi", "Merc√®", "Ricard"])

/*
 Finalment, volen saber si la mitjana d'edat dels homes √©s m√©s alta o m√©s baixa que la de les dones.
 Ens demanen una TUPLA on el primer element sigui la SUMA de les edats dels homes i el segon la de
 les dones. Ens informen que s√≥n homes els 4 primers elements de l'array i dones els 4 elements
 seg√ºents. Resoleu aquest cas primer sense afegir cap l√≠nia de codi ni cap car√†cter ";".
 */

//let test = [1,2,3,4]
//let sum = test[0...3].reduce(0,+)
//print(sum)
/// https://medium.com/@mimicatcodes/array-and-arrayslice-in-swift-3-aaa6841d3119

let tuple1 = (people[0...3].map({$0.age}).reduce(0,+),people[4...].map({$0.age}).reduce(0,+))
//print(tuple1)
test(5, tuple1 == (166, 108))

/*
 Resoleu ara el mateix cas sense cap limitaci√≥ de l√≠nies de codi.
 Quin dels dos sistemes us sembla m√©s eficient? Per qu√®?
 */

/// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html
var tuple2 = (0, 0)

var ageMan = 0
var ageWoman = 0

// print(people[0].age)
//print(people[index].age)
//for Person in people {print(Person.age)}

for i in 0...3 {
    ageMan = ageMan + people[i].age
}
for j in 4..<people.count {
    ageWoman = ageWoman + people[j].age
}
tuple2 = (ageMan,ageWoman)
print(tuple2)
test(6, tuple2 == (166, 108))

// crec que √©s m√©s eficient fer un reduce perqu√® no iterem (no recorrem l'array),es una funcio que es fa servir en bigdata(MapReduce) i te menys linies de codi
